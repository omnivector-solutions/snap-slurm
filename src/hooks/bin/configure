#!/usr/bin/env python3
import re
import os
import sys
import socket
import subprocess
from pathlib import Path


SNAP_MODE_PROCESS_MAP = {
    "slurmdbd+mysql": ["munged", "slurmdbd", "mysql"],
    "slurmdbd": ["munged", "slurmdbd"],
    "slurmctld": ["munged", "slurmctld"],
    "slurmd": ["munged", "slurmd"],
    "slurmrestd": ["munged", "slurmrestd"],
    "all": [
        "munged",
        "mysql",
        "slurmdbd",
        "slurmctld",
        "slurmd",
        "slurmrestd",
    ],
    "none": [],
}


def snap_mode_supported(snap_mode):
    if snap_mode is not None and \
       snap_mode in SNAP_MODE_PROCESS_MAP.keys():
        return True
    return False


def snapctl_get(snap_config_value):
    """Get snap config from snapctl.

    Return python None if snapctl returns the empty string.
    """

    snapctl_out = subprocess.check_output(
        ["snapctl", "get", snap_config_value]
    ).decode().rstrip()

    if snapctl_out == "":
        snapctl_out = None

    return snapctl_out


def snapctl_set(snap_config_value):
    subprocess.check_output(
        ["snapctl", "set", snap_config_value]
    )


def run_bash(bash_string):
    return subprocess.check_output(
        bash_string.split()
    ).decode().rstrip()


def configure_munge(munge_key_from_snap_config):

    munge_key_path = Path(f"{os.environ['SNAP_COMMON']}/etc/munge/munge.key")

    # Define the events surrounding the configuration of the munge.key snap
    # config.
    #
    # If the snap config for the munge.key is set AND there is an existing
    # munge key in $SNAP_COMMON/etc/munge/munge.key, write the munge key
    # obtained from snapctl to the path and stop/start munged.
    # If the munge key in $SNAP_COMMON/etc/munge/munge.key and the key
    # obtained from snapctl get are identical, return.
    if munge_key_path.exists() and munge_key_from_snap_config is not None:
        if munge_key_path.read_text() != munge_key_from_snap_config:
            munge_key_path.chmod(0o700)
            munge_key_path.write_text(munge_key_from_snap_config)
        else:
            return
    # If the munge.key is not defined as a snap config AND the
    # $SNAP_COMMON/etc/munge/munge.key file does not exist, generate
    # a munge key and write it to the file.
    elif not munge_key_path.exists() and munge_key_from_snap_config is None:
        munge_key_path.write_bytes(os.urandom(1024))
    # Alas, if the munge.key is defined and the munge key file does not exist,
    # write the snap munge.key config to the munge key file.
    elif not munge_key_path.exists() and \
            munge_key_from_snap_config is not None:
        munge_key_path.write_text(munge_key_from_snap_config)
    else:
        return

    # Set perms to 0400
    munge_key_path.chmod(0o400)


def daemon_starter(snap_mode):
    # Grab processes to start
    snapped_processes = SNAP_MODE_PROCESS_MAP[snap_mode]

    # Start the processes used by the newly configured snap mode,
    # throw exception and exit with error code 1 if we cannot start
    # the process.
    for snapped_process in snapped_processes:
        try:
            process = f"{os.environ['SNAP_INSTANCE_NAME']}.{snapped_process}"
            run_bash(f"snapctl start {process}")
        except Exception:
            sys.exit(1)


def stop_all_daemons():
    """Stop all daemons that could be running in this snap
    prior to running the other configure functions.
    """

    daemons = [
        f"{os.environ['SNAP_INSTANCE_NAME']}.munged",
        f"{os.environ['SNAP_INSTANCE_NAME']}.mysql",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmdbd",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmctld",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmd",
        f"{os.environ['SNAP_INSTANCE_NAME']}.slurmrestd",
    ]
    for daemon in daemons:
        try:
            run_bash(f"snapctl stop {daemon}")
        except Exception:
            pass


def render_slurm_conf(slurm_node_type):
    hostname = socket.gethostname().split(".")[0]

    # Base path where the slurm template config live.
    slurm_configurator_templates_base_path = Path(
        f"{os.environ['SNAP_COMMON']}/etc/slurm-configurator"
    )

    # Determine any node type specific config that need to make
    # it into the slurm config ctxt.
    #
    # This allows the snap to run in "all" mode where we don't have
    # juju to configure us.
    ctxt = {}
    if slurm_node_type == "slurmdbd":
        # The file where mysql writes the slurm user password
        # slurmdb_password_file = Path(
        #    f"{os.environ['SNAP_DATA']}/mysql/slurmdb_password"
        # )

        # if slurmdb_password_file.exists():
        #    slurmdb_password = slurmdb_password_file.read_text()
        ctxt['DbdHost'] = hostname
        ctxt['DbdAddr'] = hostname
        ctxt['StorageHost'] = "127.0.0.1"
        ctxt['StoragePass'] = "changeme"

    else:
        # Slurmd and slurmctld need identical config.
        # Thus we only render a single config file to be
        # used by both daemons.
        lscpu_out = f"{os.environ['SNAP_COMMON']/snap-resources/lscpu"
        lscpu = Path(lscpu_out, "r").read_text().replace("(s)", "")
        node_attributes = {'CPU:': '', 'Thread per core:': '', 'Core per socket:': '', 'Socket:': ''}
        try:
            for key in node_attributes:
                attribute_match = re.search(f"{key}.*", lscpu).group()
                attribute_type = attribute_match.replace(f"{key}", "").replace(" ", "")
                node_attributes[key] = attribute_type
        except Exception as error:
            print(f"Unable to set Node configuration: {error}")

        # Define slurm configs specific to slurmd and slurmctld.
        ctxt = {}
        ctxt['AccountingStorageHost'] = hostname
        ctxt['SlurmctldHost'] = hostname
        ctxt['NodeName'] = (
            f"{hostname} NodeAddr={hostname} "
            f"CPUs={node_attributes['CPU:']} "
            f"ThreadsPerCore={node_attributes['Thread per core:']} "
            f"CoresPerSocket={node_attributes['Core per socket:']} "
            f"Sockets={node_attributes['Socket:']} "
        )
        ctxt['PartitionName'] = (
            f"debug Nodes={hostname} "
            "Default=YES State=UP"
        )

    # Load, merge and render the template and ctxt into the slurmdbd.conf.
    f = slurm_configurator_templates_base_path / f"{slurm_node_type}.conf.tmpl"
    return f.read_text().format(**ctxt)


def configure_snap_mode_and_render_slurm_config(snap_mode_from_snap_config):
    snap_mode_path = Path(f"{os.environ['SNAP_COMMON']}/snap_mode")

    # If the snap.mode has changed AND is different then what we have
    # on disk:
    #     - stop all running processes
    #     - start only the processes which are supported by the snap.mode
    if not snap_mode_supported(snap_mode_from_snap_config):
        raise Exception(f"Unsupported value: {snap_mode_from_snap_config}")
    else:
        if snap_mode_path.read_text() != snap_mode_from_snap_config:
            # Write out the new snap mode
            snap_mode_path.write_text(snap_mode_from_snap_config)

    def render_config_for_config_type(slurm_config_types):
        for config_type in slurm_config_types:
            slurm_conf_file = Path(
                f"{os.environ['SNAP_COMMON']}/etc/slurm/{config_type}.conf"
            )
            slurm_conf_file.write_text(render_slurm_conf(config_type))
            slurm_conf_file.chmod(0o777)

    # Render appropriate slurm config files
    #
    # slurmdbd.conf for slurmdbd or slurdbd+mysql
    # slurm.conf for any other snap.mode configuration
    slurm_config_types = []
    # Find out what config files we need to write
    if snap_mode_from_snap_config == "all":
        slurm_config_types.append("slurm")
        slurm_config_types.append("slurmdbd")
        render_config_for_config_type(slurm_config_types)
    elif snap_mode_from_snap_config == "slurmdbd+mysql":
        slurm_config_types.append("slurmdbd")
        render_config_for_config_type(slurm_config_types)


if __name__ == "__main__":
    snap_mode = snapctl_get("snap.mode")
    munge_key = snapctl_get("munge.key")

    stop_all_daemons()

    configure_munge(munge_key)
    configure_snap_mode_and_render_slurm_config(snap_mode)

    daemon_starter(snap_mode)
